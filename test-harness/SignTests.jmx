<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
        <collectionProp name="UserParameters.names">
          <stringProp name="-758770169">server_name</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="-1850417723">
            <stringProp name="-1204607085">localhost</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">false</boolProp>
      </UserParameters>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="security-service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="95356359">data1</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1239580359">
              <stringProp name="-793239412">apple_1</stringProp>
            </collectionProp>
            <collectionProp name="-1239580395">
              <stringProp name="-793239411">apple_2</stringProp>
            </collectionProp>
            <collectionProp name="-1239580431">
              <stringProp name="-793239410">apple_3</stringProp>
            </collectionProp>
            <collectionProp name="-1239581244">
              <stringProp name="-793239409">apple_4</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter_[counter_value]" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SignOneVal" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;value&quot;: &quot;${data1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server_name}</stringProp>
          <stringProp name="HTTPSampler.port">8013</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_[signatureValueData1]" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">signatureValueData1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.signatureValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_[signatureKeyData1]" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">signatureKeyData1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.keyId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">signatureKeyData1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyOneVal" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;value&quot;: {&#xd;
		&quot;claim&quot;: &quot;${data1}&quot;,&#xd;
		&quot;keyId&quot;: &quot;${signatureKeyData1}&quot;,&#xd;
		&quot;signatureValue&quot;: &quot;${signatureValueData1}&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server_name}</stringProp>
          <stringProp name="HTTPSampler.port">8013</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/verify</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_[verificationSuccess]" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">verificationSuccess</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">verificationSuccess</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SignEntity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;entity&quot;: {&#xd;
    &quot;@context&quot;: {&#xd;
      &quot;rdf&quot;: &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;,&#xd;
      &quot;rdfs&quot;: &quot;http://www.w3.org/2000/01/rdf-schema#&quot;,&#xd;
      &quot;teacher&quot;: &quot;http://localhost:8080/&quot;,&#xd;
      &quot;xsd&quot;: &quot;http://www.w3.org/2001/XMLSchema#&quot;,&#xd;
      &quot;sc&quot;: &quot;https://w3id.org/security/v1/&quot;,&#xd;
      &quot;@vocab&quot;: &quot;http://localhost:8080/&quot;,&#xd;
      &quot;gender&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;birthDate&quot;: {&#xd;
        &quot;@type&quot;: &quot;xsd:date&quot;&#xd;
      },&#xd;
      &quot;socialCategory&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;highestAcademicQualification&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;highestTeacherQualification&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;yearOfJoiningService&quot;: {&#xd;
        &quot;@type&quot;: &quot;xsd:gYear&quot;&#xd;
      },&#xd;
      &quot;teachingRole&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;teacherType&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;appointmentType&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;classesTaught&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;appointedForSubjects&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;appointmentYear&quot;: {&#xd;
        &quot;@type&quot;: &quot;xsd:gYear&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromBRC&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;daysOfInServiceTeacherTraining&quot;: {&#xd;
        &quot;@type&quot;: &quot;xsd:decimal&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromCRC&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromDIET&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromOthers&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;nonTeachingAssignmentsForAcademicCalendar&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;daysOfNonTeachingAssignments&quot;: {&#xd;
        &quot;@type&quot;: &quot;xsd:decimal&quot;&#xd;
      },&#xd;
      &quot;disabilityType&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;trainedForChildrenSpecialNeeds&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;trainedinUseOfComputer&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;mainSubjectsTaught&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;basicProficiencyLevel&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;proficiencySubject&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;proficiencyAcademicQualification&quot;: {&#xd;
        &quot;@type&quot;: &quot;@id&quot;&#xd;
      },&#xd;
      &quot;created&quot;: {&#xd;
        &quot;@type&quot;: &quot;sc:created&quot;&#xd;
      },&#xd;
      &quot;creator&quot;: {&#xd;
        &quot;@type&quot;: &quot;sc:creator&quot;&#xd;
      },&#xd;
      &quot;nonce&quot;: {&#xd;
        &quot;@type&quot;: &quot;sc:nonce&quot;&#xd;
      },&#xd;
      &quot;signatureFor&quot;: {&#xd;
        &quot;@type&quot;: &quot;xsd:anyURI&quot;&#xd;
      },&#xd;
      &quot;signatureValue&quot;: {&#xd;
        &quot;@type&quot;: &quot;sc:signatureValue&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;@type&quot;: &quot;Teacher&quot;,&#xd;
    &quot;signatures&quot;: [&#xd;
      {&#xd;
        &quot;@type&quot;: &quot;sc:GraphSignature2012&quot;,&#xd;
        &quot;signatureFor&quot;: &quot;http://localhost:8080/serialNum&quot;,&#xd;
        &quot;creator&quot;: &quot;https://example.com/i/pat/keys/5&quot;,&#xd;
        &quot;created&quot;: &quot;2017-09-23T20:21:34Z&quot;,&#xd;
        &quot;nonce&quot;: &quot;2bbgh3dgjg2302d-d2b3gi423d42&quot;,&#xd;
        &quot;signatureValue&quot;: &quot;eyiOiJKJ0eXA...OEjgFWFXk&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;@type&quot;: &quot;sc:GraphSignature2012&quot;,&#xd;
        &quot;signatureFor&quot;: &quot;http://localhost:8080/nationalIdentifier&quot;,&#xd;
        &quot;creator&quot;: &quot;https://example.com/i/pat/keys/5&quot;,&#xd;
        &quot;created&quot;: &quot;2017-09-23T20:21:34Z&quot;,&#xd;
        &quot;nonce&quot;: &quot;2bbgh3dgjg2302d-d2b3gi423d44&quot;,&#xd;
        &quot;signatureValue&quot;: &quot;eyiOiJABDCeXA...OEjgFWFXk&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;serialNum&quot;: 21,&#xd;
    &quot;teacherCode&quot;: &quot;12244&quot;,&#xd;
    &quot;nationalIdentifier&quot;: &quot;1234567890123456&quot;,&#xd;
    &quot;teacherName&quot;: &quot;Marvin Pande&quot;,&#xd;
    &quot;gender&quot;: &quot;GenderTypeCode-MALE&quot;,&#xd;
    &quot;birthDate&quot;: &quot;1990-12-06&quot;,&#xd;
    &quot;socialCategory&quot;: &quot;SocialCategoryTypeCode-GENERAL&quot;,&#xd;
    &quot;highestAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-PHD&quot;,&#xd;
    &quot;highestTeacherQualification&quot;: &quot;TeacherQualificationTypeCode-MED&quot;,&#xd;
    &quot;yearOfJoiningService&quot;: &quot;2014&quot;,&#xd;
    &quot;teachingRole&quot;: {&#xd;
      &quot;@type&quot;: &quot;TeachingRole&quot;,&#xd;
      &quot;teacherType&quot;: &quot;TeacherTypeCode-HEAD&quot;,&#xd;
      &quot;appointmentType&quot;: &quot;TeacherAppointmentTypeCode-REGULAR&quot;,&#xd;
      &quot;classesTaught&quot;: &quot;ClassTypeCode-SECONDARYANDHIGHERSECONDARY&quot;,&#xd;
      &quot;appointedForSubjects&quot;: &quot;SubjectCode-ENGLISH&quot;,&#xd;
      &quot;mainSubjectsTaught&quot;: [&#xd;
        &quot;SubjectCode-SOCIALSTUDIES&quot;&#xd;
      ],&#xd;
      &quot;appointmentYear&quot;: &quot;2015&quot;&#xd;
    },&#xd;
    &quot;inServiceTeacherTrainingFromBRC&quot;: {&#xd;
      &quot;@type&quot;: &quot;InServiceTeacherTrainingFromBlockResourceCentre&quot;,&#xd;
      &quot;daysOfInServiceTeacherTraining&quot;: &quot;10&quot;&#xd;
    },&#xd;
    &quot;inServiceTeacherTrainingFromCRC&quot;: {&#xd;
      &quot;@type&quot;: &quot;InServiceTeacherTrainingFromClusterResourceCentre&quot;,&#xd;
      &quot;daysOfInServiceTeacherTraining&quot;: &quot;2&quot;&#xd;
    },&#xd;
    &quot;inServiceTeacherTrainingFromDIET&quot;: {&#xd;
      &quot;@type&quot;: &quot;InServiceTeacherTrainingFromDIET&quot;,&#xd;
      &quot;daysOfInServiceTeacherTraining&quot;: &quot;5.5&quot;&#xd;
    },&#xd;
    &quot;inServiceTeacherTrainingFromOthers&quot;: {&#xd;
      &quot;@type&quot;: &quot;InServiceTeacherTrainingFromOthers&quot;,&#xd;
      &quot;daysOfInServiceTeacherTraining&quot;: &quot;3.5&quot;&#xd;
    },&#xd;
    &quot;nonTeachingAssignmentsForAcademicCalendar&quot;: {&#xd;
      &quot;@type&quot;: &quot;NonTeachingAssignmentsForAcademicCalendar&quot;,&#xd;
      &quot;daysOfNonTeachingAssignments&quot;: 6&#xd;
    },&#xd;
    &quot;basicProficiencyLevel&quot;: [&#xd;
      {&#xd;
        &quot;@type&quot;: &quot;BasicProficiencyLevel&quot;,&#xd;
        &quot;proficiencySubject&quot;: &quot;SubjectCode-MATH&quot;,&#xd;
        &quot;proficiencyAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-PHD&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;@type&quot;: &quot;BasicProficiencyLevel&quot;,&#xd;
        &quot;proficiencySubject&quot;: &quot;SubjectCode-ENGLISH&quot;,&#xd;
        &quot;proficiencyAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-HIGHERSECONDARY&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;@type&quot;: &quot;BasicProficiencyLevel&quot;,&#xd;
        &quot;proficiencySubject&quot;: &quot;SubjectCode-SOCIALSTUDIES&quot;,&#xd;
        &quot;proficiencyAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-SECONDARY&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;disabilityType&quot;: &quot;DisabilityCode-NA&quot;,&#xd;
    &quot;trainedForChildrenSpecialNeeds&quot;: &quot;YesNoCode-YES&quot;,&#xd;
    &quot;trainedinUseOfComputer&quot;: &quot;YesNoCode-YES&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server_name}</stringProp>
          <stringProp name="HTTPSampler.port">8013</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_[signatureEntity1]" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">signatureEntity1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.signatureValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_[signatureKeyEntity1]" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">signatureKeyEntity1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.keyId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">signatureKeyData1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VerifyEntity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;entity&quot;: {&#xd;
    &quot;claim&quot;: {&#xd;
      &quot;@context&quot;: {&#xd;
        &quot;rdf&quot;: &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;,&#xd;
        &quot;rdfs&quot;: &quot;http://www.w3.org/2000/01/rdf-schema#&quot;,&#xd;
        &quot;teacher&quot;: &quot;http://localhost:8080/&quot;,&#xd;
        &quot;xsd&quot;: &quot;http://www.w3.org/2001/XMLSchema#&quot;,&#xd;
        &quot;sc&quot;: &quot;https://w3id.org/security/v1/&quot;,&#xd;
        &quot;@vocab&quot;: &quot;http://localhost:8080/&quot;,&#xd;
        &quot;gender&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;birthDate&quot;: {&#xd;
          &quot;@type&quot;: &quot;xsd:date&quot;&#xd;
        },&#xd;
        &quot;socialCategory&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;highestAcademicQualification&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;highestTeacherQualification&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;yearOfJoiningService&quot;: {&#xd;
          &quot;@type&quot;: &quot;xsd:gYear&quot;&#xd;
        },&#xd;
        &quot;teachingRole&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;teacherType&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;appointmentType&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;classesTaught&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;appointedForSubjects&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;appointmentYear&quot;: {&#xd;
          &quot;@type&quot;: &quot;xsd:gYear&quot;&#xd;
        },&#xd;
        &quot;inServiceTeacherTrainingFromBRC&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;daysOfInServiceTeacherTraining&quot;: {&#xd;
          &quot;@type&quot;: &quot;xsd:decimal&quot;&#xd;
        },&#xd;
        &quot;inServiceTeacherTrainingFromCRC&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;inServiceTeacherTrainingFromDIET&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;inServiceTeacherTrainingFromOthers&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;nonTeachingAssignmentsForAcademicCalendar&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;daysOfNonTeachingAssignments&quot;: {&#xd;
          &quot;@type&quot;: &quot;xsd:decimal&quot;&#xd;
        },&#xd;
        &quot;disabilityType&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;trainedForChildrenSpecialNeeds&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;trainedinUseOfComputer&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;mainSubjectsTaught&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;basicProficiencyLevel&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;proficiencySubject&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;proficiencyAcademicQualification&quot;: {&#xd;
          &quot;@type&quot;: &quot;@id&quot;&#xd;
        },&#xd;
        &quot;created&quot;: {&#xd;
          &quot;@type&quot;: &quot;sc:created&quot;&#xd;
        },&#xd;
        &quot;creator&quot;: {&#xd;
          &quot;@type&quot;: &quot;sc:creator&quot;&#xd;
        },&#xd;
        &quot;nonce&quot;: {&#xd;
          &quot;@type&quot;: &quot;sc:nonce&quot;&#xd;
        },&#xd;
        &quot;signatureFor&quot;: {&#xd;
          &quot;@type&quot;: &quot;xsd:anyURI&quot;&#xd;
        },&#xd;
        &quot;signatureValue&quot;: {&#xd;
          &quot;@type&quot;: &quot;sc:signatureValue&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;@type&quot;: &quot;Teacher&quot;,&#xd;
      &quot;signatures&quot;: [&#xd;
        {&#xd;
          &quot;@type&quot;: &quot;sc:GraphSignature2012&quot;,&#xd;
          &quot;signatureFor&quot;: &quot;http://localhost:8080/serialNum&quot;,&#xd;
          &quot;creator&quot;: &quot;https://example.com/i/pat/keys/5&quot;,&#xd;
          &quot;created&quot;: &quot;2017-09-23T20:21:34Z&quot;,&#xd;
          &quot;nonce&quot;: &quot;2bbgh3dgjg2302d-d2b3gi423d42&quot;,&#xd;
          &quot;signatureValue&quot;: &quot;eyiOiJKJ0eXA...OEjgFWFXk&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;@type&quot;: &quot;sc:GraphSignature2012&quot;,&#xd;
          &quot;signatureFor&quot;: &quot;http://localhost:8080/nationalIdentifier&quot;,&#xd;
          &quot;creator&quot;: &quot;https://example.com/i/pat/keys/5&quot;,&#xd;
          &quot;created&quot;: &quot;2017-09-23T20:21:34Z&quot;,&#xd;
          &quot;nonce&quot;: &quot;2bbgh3dgjg2302d-d2b3gi423d44&quot;,&#xd;
          &quot;signatureValue&quot;: &quot;eyiOiJABDCeXA...OEjgFWFXk&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;serialNum&quot;: 21,&#xd;
      &quot;teacherCode&quot;: &quot;12244&quot;,&#xd;
      &quot;nationalIdentifier&quot;: &quot;1234567890123456&quot;,&#xd;
      &quot;teacherName&quot;: &quot;Marvin Pande&quot;,&#xd;
      &quot;gender&quot;: &quot;GenderTypeCode-MALE&quot;,&#xd;
      &quot;birthDate&quot;: &quot;1990-12-06&quot;,&#xd;
      &quot;socialCategory&quot;: &quot;SocialCategoryTypeCode-GENERAL&quot;,&#xd;
      &quot;highestAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-PHD&quot;,&#xd;
      &quot;highestTeacherQualification&quot;: &quot;TeacherQualificationTypeCode-MED&quot;,&#xd;
      &quot;yearOfJoiningService&quot;: &quot;2014&quot;,&#xd;
      &quot;teachingRole&quot;: {&#xd;
        &quot;@type&quot;: &quot;TeachingRole&quot;,&#xd;
        &quot;teacherType&quot;: &quot;TeacherTypeCode-HEAD&quot;,&#xd;
        &quot;appointmentType&quot;: &quot;TeacherAppointmentTypeCode-REGULAR&quot;,&#xd;
        &quot;classesTaught&quot;: &quot;ClassTypeCode-SECONDARYANDHIGHERSECONDARY&quot;,&#xd;
        &quot;appointedForSubjects&quot;: &quot;SubjectCode-ENGLISH&quot;,&#xd;
        &quot;mainSubjectsTaught&quot;: [&#xd;
          &quot;SubjectCode-SOCIALSTUDIES&quot;&#xd;
        ],&#xd;
        &quot;appointmentYear&quot;: &quot;2015&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromBRC&quot;: {&#xd;
        &quot;@type&quot;: &quot;InServiceTeacherTrainingFromBlockResourceCentre&quot;,&#xd;
        &quot;daysOfInServiceTeacherTraining&quot;: &quot;10&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromCRC&quot;: {&#xd;
        &quot;@type&quot;: &quot;InServiceTeacherTrainingFromClusterResourceCentre&quot;,&#xd;
        &quot;daysOfInServiceTeacherTraining&quot;: &quot;2&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromDIET&quot;: {&#xd;
        &quot;@type&quot;: &quot;InServiceTeacherTrainingFromDIET&quot;,&#xd;
        &quot;daysOfInServiceTeacherTraining&quot;: &quot;5.5&quot;&#xd;
      },&#xd;
      &quot;inServiceTeacherTrainingFromOthers&quot;: {&#xd;
        &quot;@type&quot;: &quot;InServiceTeacherTrainingFromOthers&quot;,&#xd;
        &quot;daysOfInServiceTeacherTraining&quot;: &quot;3.5&quot;&#xd;
      },&#xd;
      &quot;nonTeachingAssignmentsForAcademicCalendar&quot;: {&#xd;
        &quot;@type&quot;: &quot;NonTeachingAssignmentsForAcademicCalendar&quot;,&#xd;
        &quot;daysOfNonTeachingAssignments&quot;: 6&#xd;
      },&#xd;
      &quot;basicProficiencyLevel&quot;: [&#xd;
        {&#xd;
          &quot;@type&quot;: &quot;BasicProficiencyLevel&quot;,&#xd;
          &quot;proficiencySubject&quot;: &quot;SubjectCode-MATH&quot;,&#xd;
          &quot;proficiencyAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-PHD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;@type&quot;: &quot;BasicProficiencyLevel&quot;,&#xd;
          &quot;proficiencySubject&quot;: &quot;SubjectCode-ENGLISH&quot;,&#xd;
          &quot;proficiencyAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-HIGHERSECONDARY&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;@type&quot;: &quot;BasicProficiencyLevel&quot;,&#xd;
          &quot;proficiencySubject&quot;: &quot;SubjectCode-SOCIALSTUDIES&quot;,&#xd;
          &quot;proficiencyAcademicQualification&quot;: &quot;AcademicQualificationTypeCode-SECONDARY&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;disabilityType&quot;: &quot;DisabilityCode-NA&quot;,&#xd;
      &quot;trainedForChildrenSpecialNeeds&quot;: &quot;YesNoCode-YES&quot;,&#xd;
      &quot;trainedinUseOfComputer&quot;: &quot;YesNoCode-YES&quot;&#xd;
    },&#xd;
    &quot;keyId&quot;: &quot;${signatureKeyEntity1}&quot;,&#xd;
    &quot;signatureValue&quot;: &quot;${signatureEntity1}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server_name}</stringProp>
          <stringProp name="HTTPSampler.port">8013</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/verify</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_[verificationSuccess]" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">verificationSuccess</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">verificationSuccess</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">results.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">ss-report.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
